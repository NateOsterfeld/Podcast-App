{"ast":null,"code":"var _jsxFileName = \"C:\\\\PodcastApp\\\\podcastapp-SPA\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Popular from './components/Popular/Popular';\nimport Navigation from './components/Navigation/Navigation';\nimport Discover from './components/Discover/Discover';\nimport Menu from './components/Menu/Menu';\nimport GenrePodcasts from './components/GenrePodcasts/GenrePodcasts'; // idea to add state inside popular component to save/cache podcasts once they've been loaded there\n// for discover, use curated lists\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.getPopular = () => {\n      fetch('http://localhost:3000/popular').then(response1 => response1.json()).then(response2 => this.setState({\n        popular: response2\n      }));\n    };\n\n    this.getGenre = (id, name) => {\n      const url = \"https://itunes.apple.com/search?term=podcast&genreId=\".concat(id, \"&limit=50\");\n      fetch(url).then(response => response.json()).then(response => this.setState({\n        route: 'genre',\n        genrePodcasts: {\n          name: name,\n          podcasts: response.results\n        }\n      }));\n    };\n\n    this.getEpisodes = (id, title, name, publisher) => {\n      console.log('id', id, 'title', title, 'name', name, 'publisher', publisher);\n    };\n\n    this.getMenuItems = () => {\n      fetch('http://localhost:3000/genresMenu').then(response => response.json()).then(response => {\n        this.setState({\n          genresMenu: response\n        });\n      });\n    };\n\n    this.changeRoute = route => {\n      if (route === 'popular') {\n        this.setState({\n          route: 'popular'\n        });\n        this.getPopular();\n      } else if (route === 'discover') {\n        this.setState({\n          route: 'discover'\n        });\n      }\n    };\n\n    this.state = {\n      popular: [],\n      route: 'popular',\n      genresMenu: [],\n      genrePodcasts: {\n        name: '',\n        podcasts: []\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.getMenuItems();\n    this.state.route === 'popular' ? this.getPopular() : console.log('get discover');\n  }\n\n  render() {\n    const route = this.state.route;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      changeRoute: this.changeRoute,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(\"section\", {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"case\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Menu, {\n      genres: this.state.genresMenu,\n      getGenre: this.getGenre,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), route === 'popular' && React.createElement(Popular, {\n      podcasts: this.state.popular,\n      getEpisodes: this.getEpisodes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), route === 'discover' && React.createElement(Discover, {\n      getEpisodes: this.getEpisodes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), route === 'genre' && React.createElement(GenrePodcasts, {\n      genrePodcasts: this.state.genrePodcasts,\n      getEpisodes: this.getEpisodes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\PodcastApp\\podcastapp-SPA\\src\\App.js"],"names":["React","Component","Popular","Navigation","Discover","Menu","GenrePodcasts","App","constructor","getPopular","fetch","then","response1","json","response2","setState","popular","getGenre","id","name","url","response","route","genrePodcasts","podcasts","results","getEpisodes","title","publisher","console","log","getMenuItems","genresMenu","changeRoute","state","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Popular from './components/Popular/Popular';\nimport Navigation from './components/Navigation/Navigation';\nimport Discover from './components/Discover/Discover';\nimport Menu from './components/Menu/Menu';\nimport GenrePodcasts from './components/GenrePodcasts/GenrePodcasts';\n// idea to add state inside popular component to save/cache podcasts once they've been loaded there\n// for discover, use curated lists\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      popular: [],\n      route: 'popular',\n      genresMenu: [],\n      genrePodcasts: { name: '', podcasts: [] }\n    }\n  }\n\n  componentDidMount() {\n    this.getMenuItems();\n    this.state.route === 'popular' \n        ? this.getPopular() \n        : console.log('get discover');\n  }\n\n  getPopular = () => {\n    fetch('http://localhost:3000/popular')\n    .then(response1 => response1.json())\n    .then(response2 => this.setState({ popular: response2 }))\n  }\n\n  getGenre = (id, name) => {\n    const url = `https://itunes.apple.com/search?term=podcast&genreId=${id}&limit=50`;\n    fetch(url)\n    .then(response => response.json())\n    .then(response => this.setState({ route: 'genre', genrePodcasts: { name: name, podcasts: response.results } }));\n  }\n\n  getEpisodes = (id, title, name, publisher) => {\n    console.log('id', id, 'title', title, 'name', name, 'publisher', publisher);\n  }\n\n  getMenuItems = () => {\n    fetch('http://localhost:3000/genresMenu')\n    .then(response => response.json())\n    .then(response => {\n      this.setState({ genresMenu: response });\n    })\n  }\n\n  //possible switch which methods come first. so run changeroute inside getpopular instead of getpopular inside changeroute like is\n  // also possible to just call setstate({route: popular}) inside getpopular method and call that only and get rid of changeroute method\n  changeRoute = (route) => {\n    if (route === 'popular') {\n      this.setState({ route: 'popular' });\n      this.getPopular();\n    } else if (route === 'discover') {\n        this.setState({ route: 'discover' });\n      }\n  }\n\n  render() {\n    const { route } = this.state;\n    return (\n      <div className=\"App\">\n        <Navigation changeRoute={this.changeRoute} />\n        <section className=\"section\">\n          <div className=\"case\">\n            <Menu genres={this.state.genresMenu} getGenre={this.getGenre} />\n            {route === 'popular' && <Popular podcasts={this.state.popular} getEpisodes={this.getEpisodes} /> }\n            {route === 'discover' && <Discover getEpisodes={this.getEpisodes} /> }\n            {route === 'genre' && <GenrePodcasts genrePodcasts={this.state.genrePodcasts} getEpisodes={this.getEpisodes} /> }\n          </div>\n        </section>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}