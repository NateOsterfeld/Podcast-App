{"ast":null,"code":"var _jsxFileName = \"C:\\\\PodcastApp\\\\podcastapp-SPA\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Popular from './components/Popular/Popular';\nimport Navigation from './components/Navigation/Navigation';\nimport Discover from './components/Discover/Discover';\nimport Menu from './components/Menu/Menu'; // idea to add state inside popular component to save/cache podcasts once they've been loaded there\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.getPopular = () => {\n      fetch('http://localhost:3000/popular').then(response1 => response1.json()).then(response2 => this.setState({\n        popular: response2\n      }));\n    };\n\n    this.getGenre = (id, name) => {\n      //if using req.params.id doesn't work, send it in body\n      const url = \"https://itunes.apple.com/search?term=podcast&genreId=\".concat(id, \"&limit=50\");\n      console.log('is it being passed', id);\n      fetch(url).then(response => response.json()).then(response => {\n        console.log('genrename', name);\n        console.log('genreresponse', response);\n      });\n    };\n\n    this.getMenuItems = () => {\n      fetch('http://localhost:3000/genresMenu').then(response => response.json()).then(response => {\n        this.setState({\n          genresMenu: response\n        });\n        console.log('genresMenu', this.state.genresMenu);\n      });\n    };\n\n    this.changeRoute = route => {\n      if (route === 'popular') {\n        this.setState({\n          route: 'popular'\n        });\n        this.getPopular();\n        console.log('wut', this.state.route);\n      } else if (route === 'discover') {\n        this.setState({\n          route: 'discover'\n        });\n        console.log('discovery');\n      }\n    };\n\n    this.state = {\n      popular: [],\n      route: 'discover',\n      genresMenu: []\n    };\n  }\n\n  componentDidMount() {\n    this.getMenuItems();\n    this.state.route === 'popular' ? this.getPopular() : console.log('get discover');\n  }\n\n  render() {\n    const route = this.state.route;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      changeRoute: this.changeRoute,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"section\", {\n      className: \"section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"case\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Menu, {\n      genres: this.state.genresMenu,\n      getGenre: this.getGenre,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), route === 'popular' && React.createElement(Popular, {\n      podcasts: this.state.popular,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), route === 'discover' && React.createElement(Discover, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:\\PodcastApp\\podcastapp-SPA\\src\\App.js"],"names":["React","Component","Popular","Navigation","Discover","Menu","App","constructor","getPopular","fetch","then","response1","json","response2","setState","popular","getGenre","id","name","url","console","log","response","getMenuItems","genresMenu","state","changeRoute","route","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Popular from './components/Popular/Popular';\nimport Navigation from './components/Navigation/Navigation';\nimport Discover from './components/Discover/Discover';\nimport Menu from './components/Menu/Menu';\n// idea to add state inside popular component to save/cache podcasts once they've been loaded there\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      popular: [],\n      route: 'discover',\n      genresMenu: [],\n    }\n  }\n\n  componentDidMount() {\n    this.getMenuItems();\n    this.state.route === 'popular' \n        ? this.getPopular() \n        : console.log('get discover');\n  }\n\n  getPopular = () => {\n    fetch('http://localhost:3000/popular')\n    .then(response1 => response1.json())\n    .then(response2 => this.setState({ popular: response2 }))\n  }\n\n  getGenre = (id, name) => {\n    //if using req.params.id doesn't work, send it in body\n    const url = `https://itunes.apple.com/search?term=podcast&genreId=${id}&limit=50`;\n    console.log('is it being passed', id);\n    fetch(url)\n    .then(response => response.json())\n    .then(response => {\n      console.log('genrename', name);\n      console.log('genreresponse', response);\n      \n    })\n  }\n\n  getMenuItems = () => {\n    fetch('http://localhost:3000/genresMenu')\n    .then(response => response.json())\n    .then(response => {\n      this.setState({ genresMenu: response });\n      console.log('genresMenu', this.state.genresMenu);\n    })\n  }\n\n  //possible switch which methods come first. so run changeroute inside getpopular instead of getpopular inside changeroute like is\n  changeRoute = (route) => {\n    if (route === 'popular') {\n      this.setState({ route: 'popular' });\n      this.getPopular();\n      console.log('wut', this.state.route);\n    } else if (route === 'discover') {\n        this.setState({ route: 'discover' });\n\n        console.log('discovery');\n      }\n    \n  }\n\n  render() {\n    const { route } = this.state;\n    return (\n      <div className=\"App\">\n        <Navigation changeRoute={this.changeRoute} />\n        <section className=\"section\">\n          <div className=\"case\">\n            <Menu genres={this.state.genresMenu} getGenre={this.getGenre} />\n            {route === 'popular' && <Popular podcasts={this.state.popular} /> }\n            {route === 'discover' && <Discover /> }\n              \n          </div>\n        </section>\n        \n       \n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}